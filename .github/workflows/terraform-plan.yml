name: 'Terraform Plan'
on:
    pull_request:
        types:
            - opened
            - reopened
        branches:
            - develop
            - 'feature/**'
            - 'bugfix/**'
            - 'release/**'
            - 'hotfix/**'
            - 'support/**'
    push:
        branches:
            - develop
            - 'feature/**'
            - 'bugfix/**'
            - 'release/**'
            - 'hotfix/**'
            - 'support/**'

env:
    TF_CLOUD_ORGANIZATION: "${{ secrets.TF_CLOUD_ORGANIZATION }}"
    TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
    TF_WORKSPACE: ${{ vars.TF_WORKSPACE }}
    CONFIG_DIRECTORY: "./"

jobs:
    terraform:
        name: "Terraform Plan"
        runs-on: ubuntu-latest
        permissions:
            contents: read
            pull-requests: write
        steps:
          - name: Checkout
            uses: actions/checkout@v4
          - name: Upload Configuration to Terraform Cloud
            uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.1.1
            id: plan-upload
            with:
                workspace: ${{ env.TF_WORKSPACE }}
                directory: ${{ env.CONFIG_DIRECTORY }}
                speculative: true
          - name: Create Plan Run
            uses: hashicorp/tfc-workflows-github/actions/create-run@v1.1.1
            id: plan-run
            with:
                workspace: ${{ env.TF_WORKSPACE }}
                configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
                plan_only: true
          - name: Get Plan Output
            id: plan-output
            uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.1.1
            with:
                plan: ${{ steps.plan-run.outputs.plan_id }}
          - name: Update PR
            uses: actions/github-script@v7
            with:
                script: |
                    // 1. Retrive exsiting bot comments for the PR
                    const { data: comments } = await github.rest.issues.listComments({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        issue_number: context.issue.number,
                    });
                    const botComment = comments.find(comment => {
                        return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
                    });
                    const output = `#### Terraform Cloud Plan Output
                        \`\`\`
                        Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
                        \`\`\`
                        [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
                        `;
                    // 3. Delete previous comment so PR timeline makes sense
                    if (botComment) {
                        github.rest.issues.deleteComment({
                            owner: context.repo.owner,
                            repo: context.repo.repo,
                            comment_id: botComment.id,
                        });
                    }
                    github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: output
                    });


                

